# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_deep_jscc_test_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_deep_jscc_test_swig')
    _deep_jscc_test_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_deep_jscc_test_swig', [dirname(__file__)])
        except ImportError:
            import _deep_jscc_test_swig
            return _deep_jscc_test_swig
        try:
            _mod = imp.load_module('_deep_jscc_test_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _deep_jscc_test_swig = swig_import_helper()
    del swig_import_helper
else:
    import _deep_jscc_test_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now() -> "gr::high_res_timer_type":
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _deep_jscc_test_swig.high_res_timer_now()

def high_res_timer_now_perfmon() -> "gr::high_res_timer_type":
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _deep_jscc_test_swig.high_res_timer_now_perfmon()

def high_res_timer_tps() -> "gr::high_res_timer_type":
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _deep_jscc_test_swig.high_res_timer_tps()

def high_res_timer_epoch() -> "gr::high_res_timer_type":
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _deep_jscc_test_swig.high_res_timer_epoch()
class ofdm_equalizer_base(object):
    """Proxy of C++ gr::digital::ofdm_equalizer_base class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _deep_jscc_test_swig.delete_ofdm_equalizer_base
    __del__ = lambda self: None

    def reset(self) -> "void":
        """reset(ofdm_equalizer_base self)"""
        return _deep_jscc_test_swig.ofdm_equalizer_base_reset(self)


    def equalize(self, *args, **kwargs) -> "void":
        """equalize(ofdm_equalizer_base self, gr_complex * frame, int n_sym, pmt_vector_cfloat initial_taps, tags_vector_t tags)"""
        return _deep_jscc_test_swig.ofdm_equalizer_base_equalize(self, *args, **kwargs)


    def get_channel_state(self, taps: 'pmt_vector_cfloat') -> "void":
        """get_channel_state(ofdm_equalizer_base self, pmt_vector_cfloat taps)"""
        return _deep_jscc_test_swig.ofdm_equalizer_base_get_channel_state(self, taps)


    def fft_len(self) -> "int":
        """fft_len(ofdm_equalizer_base self) -> int"""
        return _deep_jscc_test_swig.ofdm_equalizer_base_fft_len(self)


    def base(self) -> "gr::digital::ofdm_equalizer_base::sptr":
        """base(ofdm_equalizer_base self) -> ofdm_equalizer_base_sptr"""
        return _deep_jscc_test_swig.ofdm_equalizer_base_base(self)

ofdm_equalizer_base_swigregister = _deep_jscc_test_swig.ofdm_equalizer_base_swigregister
ofdm_equalizer_base_swigregister(ofdm_equalizer_base)

class ofdm_equalizer_1d_pilots(ofdm_equalizer_base):
    """Proxy of C++ gr::digital::ofdm_equalizer_1d_pilots class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _deep_jscc_test_swig.delete_ofdm_equalizer_1d_pilots
    __del__ = lambda self: None
ofdm_equalizer_1d_pilots_swigregister = _deep_jscc_test_swig.ofdm_equalizer_1d_pilots_swigregister
ofdm_equalizer_1d_pilots_swigregister(ofdm_equalizer_1d_pilots)

class ofdm_equalizer_base_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::digital::ofdm_equalizer_base)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::digital::ofdm_equalizer_base)> self) -> ofdm_equalizer_base_sptr
        __init__(boost::shared_ptr<(gr::digital::ofdm_equalizer_base)> self, ofdm_equalizer_base p) -> ofdm_equalizer_base_sptr
        """
        this = _deep_jscc_test_swig.new_ofdm_equalizer_base_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self) -> "gr::digital::ofdm_equalizer_base *":
        """__deref__(ofdm_equalizer_base_sptr self) -> ofdm_equalizer_base"""
        return _deep_jscc_test_swig.ofdm_equalizer_base_sptr___deref__(self)

    __swig_destroy__ = _deep_jscc_test_swig.delete_ofdm_equalizer_base_sptr
    __del__ = lambda self: None

    def reset(self) -> "void":
        """reset(ofdm_equalizer_base_sptr self)"""
        return _deep_jscc_test_swig.ofdm_equalizer_base_sptr_reset(self)


    def equalize(self, *args, **kwargs) -> "void":
        """equalize(ofdm_equalizer_base_sptr self, gr_complex * frame, int n_sym, pmt_vector_cfloat initial_taps, tags_vector_t tags)"""
        return _deep_jscc_test_swig.ofdm_equalizer_base_sptr_equalize(self, *args, **kwargs)


    def get_channel_state(self, taps: 'pmt_vector_cfloat') -> "void":
        """get_channel_state(ofdm_equalizer_base_sptr self, pmt_vector_cfloat taps)"""
        return _deep_jscc_test_swig.ofdm_equalizer_base_sptr_get_channel_state(self, taps)


    def fft_len(self) -> "int":
        """fft_len(ofdm_equalizer_base_sptr self) -> int"""
        return _deep_jscc_test_swig.ofdm_equalizer_base_sptr_fft_len(self)


    def base(self) -> "gr::digital::ofdm_equalizer_base::sptr":
        """base(ofdm_equalizer_base_sptr self) -> ofdm_equalizer_base_sptr"""
        return _deep_jscc_test_swig.ofdm_equalizer_base_sptr_base(self)

ofdm_equalizer_base_sptr_swigregister = _deep_jscc_test_swig.ofdm_equalizer_base_sptr_swigregister
ofdm_equalizer_base_sptr_swigregister(ofdm_equalizer_base_sptr)

class ofdm_equalizer_1d_pilots_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::digital::ofdm_equalizer_1d_pilots)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::digital::ofdm_equalizer_1d_pilots)> self) -> ofdm_equalizer_1d_pilots_sptr
        __init__(boost::shared_ptr<(gr::digital::ofdm_equalizer_1d_pilots)> self, ofdm_equalizer_1d_pilots p) -> ofdm_equalizer_1d_pilots_sptr
        """
        this = _deep_jscc_test_swig.new_ofdm_equalizer_1d_pilots_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self) -> "gr::digital::ofdm_equalizer_1d_pilots *":
        """__deref__(ofdm_equalizer_1d_pilots_sptr self) -> ofdm_equalizer_1d_pilots"""
        return _deep_jscc_test_swig.ofdm_equalizer_1d_pilots_sptr___deref__(self)

    __swig_destroy__ = _deep_jscc_test_swig.delete_ofdm_equalizer_1d_pilots_sptr
    __del__ = lambda self: None

    def reset(self) -> "void":
        """reset(ofdm_equalizer_1d_pilots_sptr self)"""
        return _deep_jscc_test_swig.ofdm_equalizer_1d_pilots_sptr_reset(self)


    def equalize(self, *args, **kwargs) -> "void":
        """equalize(ofdm_equalizer_1d_pilots_sptr self, gr_complex * frame, int n_sym, pmt_vector_cfloat initial_taps, tags_vector_t tags)"""
        return _deep_jscc_test_swig.ofdm_equalizer_1d_pilots_sptr_equalize(self, *args, **kwargs)


    def get_channel_state(self, taps: 'pmt_vector_cfloat') -> "void":
        """get_channel_state(ofdm_equalizer_1d_pilots_sptr self, pmt_vector_cfloat taps)"""
        return _deep_jscc_test_swig.ofdm_equalizer_1d_pilots_sptr_get_channel_state(self, taps)


    def fft_len(self) -> "int":
        """fft_len(ofdm_equalizer_1d_pilots_sptr self) -> int"""
        return _deep_jscc_test_swig.ofdm_equalizer_1d_pilots_sptr_fft_len(self)


    def base(self) -> "gr::digital::ofdm_equalizer_base::sptr":
        """base(ofdm_equalizer_1d_pilots_sptr self) -> ofdm_equalizer_base_sptr"""
        return _deep_jscc_test_swig.ofdm_equalizer_1d_pilots_sptr_base(self)

ofdm_equalizer_1d_pilots_sptr_swigregister = _deep_jscc_test_swig.ofdm_equalizer_1d_pilots_sptr_swigregister
ofdm_equalizer_1d_pilots_sptr_swigregister(ofdm_equalizer_1d_pilots_sptr)


ofdm_equalizer_1d_pilots_sptr.__repr__ = lambda self: "<OFDM equalizer 1D base class>"

class ofdm_jscc_equalizer_single_tap(ofdm_equalizer_1d_pilots):
    """
    <+description+>

    Constructor Specific Documentation:



    Args:
        fft_len : 
        occupied_carriers : 
        pilot_carriers : 
        pilot_symbols : 
        symbols_skipped : 
        input_is_shifted : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fft_len: 'int', occupied_carriers: 'std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &', pilot_carriers: 'std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &', pilot_symbols: 'gr_vector_vector_complexf', symbols_skipped: 'int', input_is_shifted: 'bool'):
        """__init__(gr::deep_jscc_test::ofdm_jscc_equalizer_single_tap self, int fft_len, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & occupied_carriers, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & pilot_carriers, gr_vector_vector_complexf pilot_symbols, int symbols_skipped, bool input_is_shifted) -> ofdm_jscc_equalizer_single_tap"""
        this = _deep_jscc_test_swig.new_ofdm_jscc_equalizer_single_tap(fft_len, occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped, input_is_shifted)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def make(fft_len: 'int', occupied_carriers: 'std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &', pilot_carriers: 'std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &', pilot_symbols: 'gr_vector_vector_complexf', symbols_skipped: 'int'=0, input_is_shifted: 'bool'=True) -> "gr::deep_jscc_test::ofdm_jscc_equalizer_single_tap::sptr":
        """
        make(int fft_len, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & occupied_carriers, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & pilot_carriers, gr_vector_vector_complexf pilot_symbols, int symbols_skipped=0, bool input_is_shifted=True) -> ofdm_jscc_equalizer_single_tap_sptr

        <+description+>

        Constructor Specific Documentation:



        Args:
            fft_len : 
            occupied_carriers : 
            pilot_carriers : 
            pilot_symbols : 
            symbols_skipped : 
            input_is_shifted : 
        """
        return _deep_jscc_test_swig.ofdm_jscc_equalizer_single_tap_make(fft_len, occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped, input_is_shifted)

    make = staticmethod(make)
    __swig_destroy__ = _deep_jscc_test_swig.delete_ofdm_jscc_equalizer_single_tap
    __del__ = lambda self: None
ofdm_jscc_equalizer_single_tap_swigregister = _deep_jscc_test_swig.ofdm_jscc_equalizer_single_tap_swigregister
ofdm_jscc_equalizer_single_tap_swigregister(ofdm_jscc_equalizer_single_tap)

def ofdm_jscc_equalizer_single_tap_make(fft_len: 'int', occupied_carriers: 'std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &', pilot_carriers: 'std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &', pilot_symbols: 'gr_vector_vector_complexf', symbols_skipped: 'int'=0, input_is_shifted: 'bool'=True) -> "gr::deep_jscc_test::ofdm_jscc_equalizer_single_tap::sptr":
    """
    ofdm_jscc_equalizer_single_tap_make(int fft_len, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & occupied_carriers, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & pilot_carriers, gr_vector_vector_complexf pilot_symbols, int symbols_skipped=0, bool input_is_shifted=True) -> ofdm_jscc_equalizer_single_tap_sptr

    <+description+>

    Constructor Specific Documentation:



    Args:
        fft_len : 
        occupied_carriers : 
        pilot_carriers : 
        pilot_symbols : 
        symbols_skipped : 
        input_is_shifted : 
    """
    return _deep_jscc_test_swig.ofdm_jscc_equalizer_single_tap_make(fft_len, occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped, input_is_shifted)

class ofdm_jscc_equalizer_single_tap_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::deep_jscc_test::ofdm_jscc_equalizer_single_tap)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::deep_jscc_test::ofdm_jscc_equalizer_single_tap)> self) -> ofdm_jscc_equalizer_single_tap_sptr
        __init__(boost::shared_ptr<(gr::deep_jscc_test::ofdm_jscc_equalizer_single_tap)> self, ofdm_jscc_equalizer_single_tap p) -> ofdm_jscc_equalizer_single_tap_sptr
        """
        this = _deep_jscc_test_swig.new_ofdm_jscc_equalizer_single_tap_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self) -> "gr::deep_jscc_test::ofdm_jscc_equalizer_single_tap *":
        """__deref__(ofdm_jscc_equalizer_single_tap_sptr self) -> ofdm_jscc_equalizer_single_tap"""
        return _deep_jscc_test_swig.ofdm_jscc_equalizer_single_tap_sptr___deref__(self)

    __swig_destroy__ = _deep_jscc_test_swig.delete_ofdm_jscc_equalizer_single_tap_sptr
    __del__ = lambda self: None

    def make(self, fft_len: 'int', occupied_carriers: 'std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &', pilot_carriers: 'std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &', pilot_symbols: 'gr_vector_vector_complexf', symbols_skipped: 'int'=0, input_is_shifted: 'bool'=True) -> "gr::deep_jscc_test::ofdm_jscc_equalizer_single_tap::sptr":
        """
        make(ofdm_jscc_equalizer_single_tap_sptr self, int fft_len, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & occupied_carriers, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & pilot_carriers, gr_vector_vector_complexf pilot_symbols, int symbols_skipped=0, bool input_is_shifted=True) -> ofdm_jscc_equalizer_single_tap_sptr

        <+description+>

        Constructor Specific Documentation:



        Args:
            fft_len : 
            occupied_carriers : 
            pilot_carriers : 
            pilot_symbols : 
            symbols_skipped : 
            input_is_shifted : 
        """
        return _deep_jscc_test_swig.ofdm_jscc_equalizer_single_tap_sptr_make(self, fft_len, occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped, input_is_shifted)


    def reset(self) -> "void":
        """reset(ofdm_jscc_equalizer_single_tap_sptr self)"""
        return _deep_jscc_test_swig.ofdm_jscc_equalizer_single_tap_sptr_reset(self)


    def equalize(self, *args, **kwargs) -> "void":
        """equalize(ofdm_jscc_equalizer_single_tap_sptr self, gr_complex * frame, int n_sym, pmt_vector_cfloat initial_taps, tags_vector_t tags)"""
        return _deep_jscc_test_swig.ofdm_jscc_equalizer_single_tap_sptr_equalize(self, *args, **kwargs)


    def get_channel_state(self, taps: 'pmt_vector_cfloat') -> "void":
        """get_channel_state(ofdm_jscc_equalizer_single_tap_sptr self, pmt_vector_cfloat taps)"""
        return _deep_jscc_test_swig.ofdm_jscc_equalizer_single_tap_sptr_get_channel_state(self, taps)


    def fft_len(self) -> "int":
        """fft_len(ofdm_jscc_equalizer_single_tap_sptr self) -> int"""
        return _deep_jscc_test_swig.ofdm_jscc_equalizer_single_tap_sptr_fft_len(self)


    def base(self) -> "gr::digital::ofdm_equalizer_base::sptr":
        """base(ofdm_jscc_equalizer_single_tap_sptr self) -> ofdm_equalizer_base_sptr"""
        return _deep_jscc_test_swig.ofdm_jscc_equalizer_single_tap_sptr_base(self)

ofdm_jscc_equalizer_single_tap_sptr_swigregister = _deep_jscc_test_swig.ofdm_jscc_equalizer_single_tap_sptr_swigregister
ofdm_jscc_equalizer_single_tap_sptr_swigregister(ofdm_jscc_equalizer_single_tap_sptr)


ofdm_jscc_equalizer_single_tap_sptr.__repr__ = lambda self: "OFDM_JSCC_equalizer_single_tap"
ofdm_jscc_equalizer_single_tap = ofdm_jscc_equalizer_single_tap .make;

class packet_header_default(object):
    """Proxy of C++ gr::digital::packet_header_default class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        """__init__(gr::digital::packet_header_default self, long header_len, std::string const & len_tag_key, std::string const & num_tag_key, int bits_per_byte=1) -> packet_header_default"""
        this = _deep_jscc_test_swig.new_packet_header_default(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _deep_jscc_test_swig.delete_packet_header_default
    __del__ = lambda self: None

    def base(self) -> "gr::digital::packet_header_default::sptr":
        """base(packet_header_default self) -> packet_header_default_sptr"""
        return _deep_jscc_test_swig.packet_header_default_base(self)


    def formatter(self) -> "gr::digital::packet_header_default::sptr":
        """formatter(packet_header_default self) -> packet_header_default_sptr"""
        return _deep_jscc_test_swig.packet_header_default_formatter(self)


    def set_header_num(self, header_num: 'unsigned int') -> "void":
        """set_header_num(packet_header_default self, unsigned int header_num)"""
        return _deep_jscc_test_swig.packet_header_default_set_header_num(self, header_num)


    def header_len(self) -> "long":
        """header_len(packet_header_default self) -> long"""
        return _deep_jscc_test_swig.packet_header_default_header_len(self)


    def len_tag_key(self) -> "pmt::pmt_t":
        """len_tag_key(packet_header_default self) -> swig_pmt_ptr"""
        return _deep_jscc_test_swig.packet_header_default_len_tag_key(self)


    def header_formatter(self, *args, **kwargs) -> "bool":
        """header_formatter(packet_header_default self, long packet_len, unsigned char * out, tags_vector_t tags) -> bool"""
        return _deep_jscc_test_swig.packet_header_default_header_formatter(self, *args, **kwargs)


    def header_parser(self, header: 'unsigned char const *', tags: 'tags_vector_t') -> "bool":
        """header_parser(packet_header_default self, unsigned char const * header, tags_vector_t tags) -> bool"""
        return _deep_jscc_test_swig.packet_header_default_header_parser(self, header, tags)


    def make(*args, **kwargs) -> "gr::digital::packet_header_default::sptr":
        """make(long header_len, std::string const & len_tag_key, std::string const & num_tag_key, int bits_per_byte=1) -> packet_header_default_sptr"""
        return _deep_jscc_test_swig.packet_header_default_make(*args, **kwargs)

    make = staticmethod(make)
packet_header_default_swigregister = _deep_jscc_test_swig.packet_header_default_swigregister
packet_header_default_swigregister(packet_header_default)

def packet_header_default_make(*args, **kwargs) -> "gr::digital::packet_header_default::sptr":
    """packet_header_default_make(long header_len, std::string const & len_tag_key, std::string const & num_tag_key, int bits_per_byte=1) -> packet_header_default_sptr"""
    return _deep_jscc_test_swig.packet_header_default_make(*args, **kwargs)

class packet_header_default_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::digital::packet_header_default)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::digital::packet_header_default)> self) -> packet_header_default_sptr
        __init__(boost::shared_ptr<(gr::digital::packet_header_default)> self, packet_header_default p) -> packet_header_default_sptr
        """
        this = _deep_jscc_test_swig.new_packet_header_default_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self) -> "gr::digital::packet_header_default *":
        """__deref__(packet_header_default_sptr self) -> packet_header_default"""
        return _deep_jscc_test_swig.packet_header_default_sptr___deref__(self)

    __swig_destroy__ = _deep_jscc_test_swig.delete_packet_header_default_sptr
    __del__ = lambda self: None

    def base(self) -> "gr::digital::packet_header_default::sptr":
        """base(packet_header_default_sptr self) -> packet_header_default_sptr"""
        return _deep_jscc_test_swig.packet_header_default_sptr_base(self)


    def formatter(self) -> "gr::digital::packet_header_default::sptr":
        """formatter(packet_header_default_sptr self) -> packet_header_default_sptr"""
        return _deep_jscc_test_swig.packet_header_default_sptr_formatter(self)


    def set_header_num(self, header_num: 'unsigned int') -> "void":
        """set_header_num(packet_header_default_sptr self, unsigned int header_num)"""
        return _deep_jscc_test_swig.packet_header_default_sptr_set_header_num(self, header_num)


    def header_len(self) -> "long":
        """header_len(packet_header_default_sptr self) -> long"""
        return _deep_jscc_test_swig.packet_header_default_sptr_header_len(self)


    def len_tag_key(self) -> "pmt::pmt_t":
        """len_tag_key(packet_header_default_sptr self) -> swig_pmt_ptr"""
        return _deep_jscc_test_swig.packet_header_default_sptr_len_tag_key(self)


    def header_formatter(self, *args, **kwargs) -> "bool":
        """header_formatter(packet_header_default_sptr self, long packet_len, unsigned char * out, tags_vector_t tags) -> bool"""
        return _deep_jscc_test_swig.packet_header_default_sptr_header_formatter(self, *args, **kwargs)


    def header_parser(self, header: 'unsigned char const *', tags: 'tags_vector_t') -> "bool":
        """header_parser(packet_header_default_sptr self, unsigned char const * header, tags_vector_t tags) -> bool"""
        return _deep_jscc_test_swig.packet_header_default_sptr_header_parser(self, header, tags)


    def make(self, *args, **kwargs) -> "gr::digital::packet_header_default::sptr":
        """make(packet_header_default_sptr self, long header_len, std::string const & len_tag_key, std::string const & num_tag_key, int bits_per_byte=1) -> packet_header_default_sptr"""
        return _deep_jscc_test_swig.packet_header_default_sptr_make(self, *args, **kwargs)

packet_header_default_sptr_swigregister = _deep_jscc_test_swig.packet_header_default_sptr_swigregister
packet_header_default_sptr_swigregister(packet_header_default_sptr)

class packet_header_jscc(packet_header_default):
    """
    <+description+>

    Constructor Specific Documentation:



    Args:
        occupied_carriers : 
        n_syms : 
        len_tag_key : 
        frame_len_tag_key : 
        num_tag_key : 
        bits_per_header_sym : 
        bits_per_payload_sym : 
        scramble_header : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, occupied_carriers: 'std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &', n_syms: 'int', len_tag_key: 'std::string const &', frame_len_tag_key: 'std::string const &', num_tag_key: 'std::string const &', bits_per_header_sym: 'int', bits_per_payload_sym: 'int', scramble_header: 'bool'):
        """__init__(gr::deep_jscc_test::packet_header_jscc self, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & occupied_carriers, int n_syms, std::string const & len_tag_key, std::string const & frame_len_tag_key, std::string const & num_tag_key, int bits_per_header_sym, int bits_per_payload_sym, bool scramble_header) -> packet_header_jscc"""
        this = _deep_jscc_test_swig.new_packet_header_jscc(occupied_carriers, n_syms, len_tag_key, frame_len_tag_key, num_tag_key, bits_per_header_sym, bits_per_payload_sym, scramble_header)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _deep_jscc_test_swig.delete_packet_header_jscc
    __del__ = lambda self: None

    def make(*args, **kwargs) -> "gr::deep_jscc_test::packet_header_jscc::sptr":
        """
        make(std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & occupied_carriers, int n_syms, std::string const & len_tag_key, std::string const & frame_len_tag_key, std::string const & num_tag_key, int bits_per_header_sym=1, int bits_per_payload_sym=1, bool scramble_header=False) -> packet_header_default_sptr

        <+description+>

        Constructor Specific Documentation:



        Args:
            occupied_carriers : 
            n_syms : 
            len_tag_key : 
            frame_len_tag_key : 
            num_tag_key : 
            bits_per_header_sym : 
            bits_per_payload_sym : 
            scramble_header : 
        """
        return _deep_jscc_test_swig.packet_header_jscc_make(*args, **kwargs)

    make = staticmethod(make)
packet_header_jscc_swigregister = _deep_jscc_test_swig.packet_header_jscc_swigregister
packet_header_jscc_swigregister(packet_header_jscc)

def packet_header_jscc_make(*args, **kwargs) -> "gr::deep_jscc_test::packet_header_jscc::sptr":
    """
    packet_header_jscc_make(std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & occupied_carriers, int n_syms, std::string const & len_tag_key, std::string const & frame_len_tag_key, std::string const & num_tag_key, int bits_per_header_sym=1, int bits_per_payload_sym=1, bool scramble_header=False) -> packet_header_default_sptr

    <+description+>

    Constructor Specific Documentation:



    Args:
        occupied_carriers : 
        n_syms : 
        len_tag_key : 
        frame_len_tag_key : 
        num_tag_key : 
        bits_per_header_sym : 
        bits_per_payload_sym : 
        scramble_header : 
    """
    return _deep_jscc_test_swig.packet_header_jscc_make(*args, **kwargs)

class packet_header_jscc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::deep_jscc_test::packet_header_jscc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::deep_jscc_test::packet_header_jscc)> self) -> packet_header_jscc_sptr
        __init__(boost::shared_ptr<(gr::deep_jscc_test::packet_header_jscc)> self, packet_header_jscc p) -> packet_header_jscc_sptr
        """
        this = _deep_jscc_test_swig.new_packet_header_jscc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self) -> "gr::deep_jscc_test::packet_header_jscc *":
        """__deref__(packet_header_jscc_sptr self) -> packet_header_jscc"""
        return _deep_jscc_test_swig.packet_header_jscc_sptr___deref__(self)

    __swig_destroy__ = _deep_jscc_test_swig.delete_packet_header_jscc_sptr
    __del__ = lambda self: None

    def make(self, *args, **kwargs) -> "gr::deep_jscc_test::packet_header_jscc::sptr":
        """
        make(packet_header_jscc_sptr self, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & occupied_carriers, int n_syms, std::string const & len_tag_key, std::string const & frame_len_tag_key, std::string const & num_tag_key, int bits_per_header_sym=1, int bits_per_payload_sym=1, bool scramble_header=False) -> packet_header_default_sptr

        <+description+>

        Constructor Specific Documentation:



        Args:
            occupied_carriers : 
            n_syms : 
            len_tag_key : 
            frame_len_tag_key : 
            num_tag_key : 
            bits_per_header_sym : 
            bits_per_payload_sym : 
            scramble_header : 
        """
        return _deep_jscc_test_swig.packet_header_jscc_sptr_make(self, *args, **kwargs)


    def base(self) -> "gr::digital::packet_header_default::sptr":
        """base(packet_header_jscc_sptr self) -> packet_header_default_sptr"""
        return _deep_jscc_test_swig.packet_header_jscc_sptr_base(self)


    def formatter(self) -> "gr::digital::packet_header_default::sptr":
        """formatter(packet_header_jscc_sptr self) -> packet_header_default_sptr"""
        return _deep_jscc_test_swig.packet_header_jscc_sptr_formatter(self)


    def set_header_num(self, header_num: 'unsigned int') -> "void":
        """set_header_num(packet_header_jscc_sptr self, unsigned int header_num)"""
        return _deep_jscc_test_swig.packet_header_jscc_sptr_set_header_num(self, header_num)


    def header_len(self) -> "long":
        """header_len(packet_header_jscc_sptr self) -> long"""
        return _deep_jscc_test_swig.packet_header_jscc_sptr_header_len(self)


    def len_tag_key(self) -> "pmt::pmt_t":
        """len_tag_key(packet_header_jscc_sptr self) -> swig_pmt_ptr"""
        return _deep_jscc_test_swig.packet_header_jscc_sptr_len_tag_key(self)


    def header_formatter(self, *args, **kwargs) -> "bool":
        """header_formatter(packet_header_jscc_sptr self, long packet_len, unsigned char * out, tags_vector_t tags) -> bool"""
        return _deep_jscc_test_swig.packet_header_jscc_sptr_header_formatter(self, *args, **kwargs)


    def header_parser(self, header: 'unsigned char const *', tags: 'tags_vector_t') -> "bool":
        """header_parser(packet_header_jscc_sptr self, unsigned char const * header, tags_vector_t tags) -> bool"""
        return _deep_jscc_test_swig.packet_header_jscc_sptr_header_parser(self, header, tags)

packet_header_jscc_sptr_swigregister = _deep_jscc_test_swig.packet_header_jscc_sptr_swigregister
packet_header_jscc_sptr_swigregister(packet_header_jscc_sptr)


packet_header_jscc_sptr.__repr__ = lambda self: "<packet_header_jscc>"
packet_header_jscc = packet_header_jscc .make;



